package com.phonetaxx.ui


import android.content.Intent
import android.net.Uri
import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import com.itextpdf.text.*
import com.itextpdf.text.List
import com.itextpdf.text.pdf.PdfPCell
import com.itextpdf.text.pdf.PdfPTable
import com.itextpdf.text.pdf.PdfWriter
import com.phonetaxx.R
import java.io.File
import java.io.FileOutputStream
import java.io.IOException
import java.util.*

class FirstPDFActivity : AppCompatActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
    }

    @Throws(IOException::class, java.io.IOException::class)
    fun PrintDocument(dest: String) {
        try {

            //            Document document = new Document();
            val document = Document(
                PageSize.PENGUIN_SMALL_PAPERBACK,
                10f,
                10f,
                100f,
                0f
            )//PENGUIN_SMALL_PAPERBACK used to set the paper size
            PdfWriter.getInstance(document, FileOutputStream(dest))
            document.open()
            addMetaData(document)
            addTitlePage(document)
            addContent(document)
            document.close()

            val file = File(dest)
            val intent = Intent(Intent.ACTION_VIEW)
            intent.setDataAndType(Uri.fromFile(file), "application/pdf")
            intent.flags = Intent.FLAG_ACTIVITY_NO_HISTORY
            startActivity(intent)
        } catch (e: Exception) {
            e.printStackTrace()
        }

    }


    companion object {

        private val catFont = Font(
            Font.FontFamily.TIMES_ROMAN, 18f,
            Font.BOLD
        ) // Set of font family alrady present with itextPdf library.
        private val redFont = Font(
            Font.FontFamily.TIMES_ROMAN, 12f,
            Font.NORMAL, BaseColor.RED
        )
        private val subFont = Font(
            Font.FontFamily.TIMES_ROMAN, 16f,
            Font.BOLD
        )
        private val smallBold = Font(
            Font.FontFamily.TIMES_ROMAN, 12f,
            Font.BOLD
        )

        val DEST = "/quick_brown_fox_PDFUA.pdf"

        private fun addMetaData(document: Document) {
            document.addTitle("My first PDF")
            document.addSubject("Using iText")
            document.addKeywords("Java, PDF, iText")
            document.addAuthor("Lars Vogel")
            document.addCreator("Lars Vogel")
        }

        @Throws(DocumentException::class)
        private fun addTitlePage(document: Document) {

            val preface = Paragraph()
            // We add one empty line
            addEmptyLine(preface, 1)
            // Lets write a big header
            preface.add(Paragraph("Title of the document", catFont))

            addEmptyLine(preface, 1)
            // Will create: Report generated by: _name, _date
            preface.add(
                Paragraph(
                    "Report generated by: " + System.getProperty("user.name") + ", " + Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                    smallBold
                )
            )
            addEmptyLine(preface, 3)
            preface.add(
                Paragraph(
                    "This document describes something which is very important ",
                    smallBold
                )
            )

            addEmptyLine(preface, 8)

            preface.add(
                Paragraph(
                    "This document is a preliminary version and not subject to your license agreement or any other agreement with vogella.com ;-).",
                    redFont
                )
            )

            document.add(preface)
            // Start a new page
            document.newPage()
        }

        @Throws(DocumentException::class)
        private fun addContent(document: Document) {
            var anchor = Anchor("First Chapter", catFont)
            anchor.name = "First Chapter"

            // Second parameter is the number of the chapter
            var catPart = Chapter(Paragraph(anchor), 1)

            var subPara = Paragraph("Subcategory 1", subFont)
            var subCatPart = catPart.addSection(subPara)
            subCatPart.add(Paragraph("Hello"))

            subPara = Paragraph("Subcategory 2", subFont)
            subCatPart = catPart.addSection(subPara)
            subCatPart.add(Paragraph("Paragraph 1"))
            subCatPart.add(Paragraph("Paragraph 2"))
            subCatPart.add(Paragraph("Paragraph 3"))

            // add a list
            createList(subCatPart)
            val paragraph = Paragraph()
            addEmptyLine(paragraph, 5)
            subCatPart.add(paragraph)

            // add a table
            createTable(subCatPart)

            // now add all this to the document
            document.add(catPart)

            // Next section
            anchor = Anchor("Second Chapter", catFont)
            anchor.name = "Second Chapter"

            // Second parameter is the number of the chapter
            catPart = Chapter(Paragraph(anchor), 1)

            subPara = Paragraph("Subcategory", subFont)
            subCatPart = catPart.addSection(subPara)
            subCatPart.add(Paragraph("This is a very important message"))

            // now add all this to the document
            document.add(catPart)

        }

        @Throws(BadElementException::class)
        private fun createTable(subCatPart: Section) {
            val table = PdfPTable(3)

            // t.setBorderColor(BaseColor.GRAY);
            // t.setPadding(4);
            // t.setSpacing(4);
            // t.setBorderWidth(1);

            var c1 = PdfPCell(Phrase("Table Header 1"))
            c1.horizontalAlignment = Element.ALIGN_CENTER
            table.addCell(c1)

            c1 = PdfPCell(Phrase("Table Header 2"))
            c1.horizontalAlignment = Element.ALIGN_CENTER
            table.addCell(c1)

            c1 = PdfPCell(Phrase("Table Header 3"))
            c1.horizontalAlignment = Element.ALIGN_CENTER
            table.addCell(c1)
            table.headerRows = 1

            table.addCell("1.0")
            table.addCell("1.1")
            table.addCell("1.2")
            table.addCell("2.1")
            table.addCell("2.2")
            table.addCell("2.3")

            subCatPart.add(table)

        }

        private fun createList(subCatPart: Section) {
            val list = List(true, false, 10f)
            list.add(ListItem("First point"))
            list.add(ListItem("Second point"))
            list.add(ListItem("Third point"))
            subCatPart.add(list)
        }

        private fun addEmptyLine(paragraph: Paragraph, number: Int) {
            for (i in 0 until number) {
                paragraph.add(Paragraph(" "))
            }
        }
    }
}
